persistent.go

- lockfree linked-list
- lockfree queue (todo)
- gc to clean up resources (todo)

motivation

- play with golang pointer and unsafe (gasp!)
- actually need this and benchmark (see below), over a map+mutex, sync.map, or load/store
- other implementations found here were too hard to understand

caveat

- list is actually a set -> duplicate key not allowed
- can be modified to store other struct instead of int (see node struct)

commands

- go generate ./internal

related

- https://github.com/cornelk/go-benchmark
- https://github.com/zond/gotomic
- https://sourcegraph.com/github.com/jserv/concurrent-ll@master

links

- http://www.rossbencina.com/code/lockfree
- http://15418.courses.cs.cmu.edu/spring2013/article/46
- https://preshing.com/20120612/an-introduction-to-lock-free-programming/
- https://en.wikipedia.org/wiki/Non-blocking_algorithm
- https://en.wikipedia.org/wiki/Non-blocking_linked_list

results

- Map size=5000, List size=5000
go test -run=XXX -bench=Benchmark -benchmem -v ./pkg/campaign
goos: darwin
goarch: amd64
pkg: github.com/snwfog/persistent.go/pkg/campaign
BenchmarkCampaignCopyMap-8                              	     912	   1419511 ns/op	  630817 B/op	       2 allocs/op
BenchmarkCampaignCopyLinkedList-8                       	   18362	     57565 ns/op	  122881 B/op	       1 allocs/op
BenchmarkCampaignCopyParallelMap-8                      	    1224	   1086964 ns/op	  635105 B/op	     133 allocs/op
BenchmarkCampaignCopyParallelList-8                     	   20370	     67158 ns/op	  123225 B/op	       9 allocs/op
BenchmarkCampaignCopyParallelMapWithCampaignInsert-8    	     800	   1413137 ns/op	 1350338 B/op	     672 allocs/op
BenchmarkCampaignCopyParallelListWithCampaignInsert-8   	   38337	     33936 ns/op	  123163 B/op	       6 allocs/op
PASS
ok  	github.com/snwfog/persistent.go/pkg/campaign	16.146s